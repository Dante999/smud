<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="Player.h" line="10" id="noExplicitConstructor" severity="style" msg="Class &apos;Player&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="ConsoleFormatter.cpp" line="104" id="unsignedPositive" severity="style" msg="Unsigned variable &apos;number&apos; can&apos;t be negative so it is unnecessary to test it." />
    <error file="DataService.cpp" line="26" id="unreadVariable" severity="style" msg="Variable &apos;name&apos; is assigned a value that is never used." />
    <error file="DataService.cpp" line="27" id="unreadVariable" severity="style" msg="Variable &apos;description&apos; is assigned a value that is never used." />
    <error file="DataService.cpp" line="73" id="unreadVariable" severity="style" msg="Variable &apos;name&apos; is assigned a value that is never used." />
    <error file="DataService.cpp" line="74" id="unreadVariable" severity="style" msg="Variable &apos;description&apos; is assigned a value that is never used." />
    <error file="DataService.cpp" line="75" id="unreadVariable" severity="style" msg="Variable &apos;roomPath&apos; is assigned a value that is never used." />
    <error file="pugixml.hpp" line="295" id="noExplicitConstructor" severity="style" msg="Class &apos;xml_writer_file&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.hpp" line="309" id="noExplicitConstructor" severity="style" msg="Class &apos;xml_writer_stream&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.hpp" line="310" id="noExplicitConstructor" severity="style" msg="Class &apos;xml_writer_stream&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.hpp" line="796" id="noExplicitConstructor" severity="style" msg="Class &apos;xml_node_iterator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.hpp" line="1083" id="noExplicitConstructor" severity="style" msg="Class &apos;xpath_variable&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.hpp" line="1259" id="noExplicitConstructor" severity="style" msg="Class &apos;xpath_node&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="GameObject.cpp" line="14" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_name&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="GameObject.cpp" line="15" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_description&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Player.cpp" line="17" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_playerPath&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Player.cpp" line="18" id="useInitializationList" severity="style" msg="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_roomPath&apos; a value by passing the value to the constructor in the initialization list." />
    <error file="Room.cpp" line="135" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="Session.cpp" line="32" id="unreadVariable" severity="style" msg="Variable &apos;input&apos; is assigned a value that is never used." />
    <error file="Session.h" line="12" id="noExplicitConstructor" severity="style" msg="Class &apos;Session&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="pugixml.cpp" line="7989" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="pugixml.cpp" line="3130" id="variableScope" severity="style" msg="The scope of the variable &apos;ch&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="pugixml.cpp" line="3198" id="unreadVariable" severity="style" msg="Variable &apos;ch&apos; is assigned a value that is never used." />
    <error file="pugixml.cpp" line="8444" id="uninitMemberVar" severity="style" msg="Member variable &apos;xpath_variable_boolean::name&apos; is not initialized in the constructor." />
    <error file="pugixml.cpp" line="8454" id="uninitMemberVar" severity="style" msg="Member variable &apos;xpath_variable_number::name&apos; is not initialized in the constructor." />
    <error file="pugixml.cpp" line="8464" id="uninitMemberVar" severity="style" msg="Member variable &apos;xpath_variable_string::name&apos; is not initialized in the constructor." />
    <error file="pugixml.cpp" line="8479" id="uninitMemberVar" severity="style" msg="Member variable &apos;xpath_variable_node_set::name&apos; is not initialized in the constructor." />
    <error file="pugixml.cpp" line="11723" id="uninitMemberVar" severity="style" msg="Member variable &apos;xpath_parser::_scratch&apos; is not initialized in the constructor." />
    <error file="pugixml.cpp" line="1076" id="thisSubtraction" severity="style" msg="Suspicious pointer subtraction. Did you intend to write &apos;-&gt;&apos;?" />
    <error file="pugixml.cpp" line="1092" id="thisSubtraction" severity="style" msg="Suspicious pointer subtraction. Did you intend to write &apos;-&gt;&apos;?" />
    <error file="pugixml.cpp" line="488" id="noExplicitConstructor" severity="style" msg="Struct &apos;xml_allocator&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="1074" id="noExplicitConstructor" severity="style" msg="Struct &apos;xml_attribute_struct&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="1121" id="noExplicitConstructor" severity="style" msg="Struct &apos;xml_document_struct&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="2896" id="noExplicitConstructor" severity="style" msg="Struct &apos;xml_parser&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="4992" id="noExplicitConstructor" severity="style" msg="Struct &apos;name_null_sentry&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="7537" id="noExplicitConstructor" severity="style" msg="Struct &apos;xpath_allocator_capture&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="8261" id="noExplicitConstructor" severity="style" msg="Struct &apos;namespace_uri_predicate&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="1" id="ConfigurationNotChecked" severity="style" msg="Skipping configuration &apos;FP_INFINITE;FP_NAN;FP_ZERO;fpclassify&apos; since the value of &apos;FP_INFINITE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." />
    <error file="pugixml.cpp" line="1" id="ConfigurationNotChecked" severity="style" msg="Skipping configuration &apos;FP_NAN;fpclassify&apos; since the value of &apos;FP_NAN&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." />
    <error file="pugixml.cpp" line="796" id="operatorEq" severity="style" msg='The compact_pointer::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;compact_pointer &amp;compact_pointer::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.' />
    <error file="pugixml.cpp" line="858" id="operatorEq" severity="style" msg='The compact_pointer_parent::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;compact_pointer_parent &amp;compact_pointer_parent::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.' />
    <error file="pugixml.cpp" line="938" id="operatorEq" severity="style" msg='The compact_string::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;compact_string &amp;compact_string::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.' />
    <error file="pugixml.cpp" line="957" id="thisSubtraction" severity="style" msg="Suspicious pointer subtraction. Did you intend to write &apos;-&gt;&apos;?" />
    <error file="pugixml.cpp" line="1002" id="thisSubtraction" severity="style" msg="Suspicious pointer subtraction. Did you intend to write &apos;-&gt;&apos;?" />
    <error file="pugixml.cpp" line="1029" id="noExplicitConstructor" severity="style" msg="Struct &apos;xml_attribute_struct&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="pugixml.cpp" line="1" id="ConfigurationNotChecked" severity="style" msg="Skipping configuration &apos;PUGIXML_MEMORY_OUTPUT_STACK&apos; since the value of &apos;PUGIXML_MEMORY_OUTPUT_STACK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." />
    <error file="pugixml.cpp" line="1" id="ConfigurationNotChecked" severity="style" msg="Skipping configuration &apos;PUGIXML_MEMORY_PAGE_SIZE&apos; since the value of &apos;PUGIXML_MEMORY_PAGE_SIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." />
    <error file="pugixml.cpp" line="1" id="ConfigurationNotChecked" severity="style" msg="Skipping configuration &apos;PUGIXML_MEMORY_XPATH_PAGE_SIZE&apos; since the value of &apos;PUGIXML_MEMORY_XPATH_PAGE_SIZE&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." />
    <error file="pugixml.cpp" line="7567" id="uninitMemberVar" severity="style" msg="Member variable &apos;xpath_stack_data::error_handler&apos; is not initialized in the constructor." />
    <error file="pugixml.cpp" line="11723" id="uninitMemberVar" severity="style" msg="Member variable &apos;xpath_parser::_error_handler&apos; is not initialized in the constructor." />
    <error file="pugixml.cpp" line="5932" id="unusedFunction" severity="style" msg="The function &apos;append_move&apos; is never used." />
    <error file="pugixml.cpp" line="5152" id="unusedFunction" severity="style" msg="The function &apos;as_bool&apos; is never used." />
    <error file="pugixml.cpp" line="5142" id="unusedFunction" severity="style" msg="The function &apos;as_double&apos; is never used." />
    <error file="pugixml.cpp" line="5147" id="unusedFunction" severity="style" msg="The function &apos;as_float&apos; is never used." />
    <error file="pugixml.cpp" line="5132" id="unusedFunction" severity="style" msg="The function &apos;as_int&apos; is never used." />
    <error file="pugixml.cpp" line="5158" id="unusedFunction" severity="style" msg="The function &apos;as_llong&apos; is never used." />
    <error file="pugixml.cpp" line="5127" id="unusedFunction" severity="style" msg="The function &apos;as_string&apos; is never used." />
    <error file="pugixml.cpp" line="5137" id="unusedFunction" severity="style" msg="The function &apos;as_uint&apos; is never used." />
    <error file="pugixml.cpp" line="5163" id="unusedFunction" severity="style" msg="The function &apos;as_ullong&apos; is never used." />
    <error file="pugixml.cpp" line="7052" id="unusedFunction" severity="style" msg="The function &apos;as_utf8&apos; is never used." />
    <error file="pugixml.cpp" line="7064" id="unusedFunction" severity="style" msg="The function &apos;as_wide&apos; is never used." />
    <error file="pugixml.cpp" line="5399" id="unusedFunction" severity="style" msg="The function &apos;attributes&apos; is never used." />
    <error file="pugixml.cpp" line="5389" id="unusedFunction" severity="style" msg="The function &apos;children&apos; is never used." />
    <error file="CommandParser.cpp" line="161" id="unusedFunction" severity="style" msg="The function &apos;cmdHelp&apos; is never used." />
    <error file="pugixml.cpp" line="12410" id="unusedFunction" severity="style" msg="The function &apos;evaluate_boolean&apos; is never used." />
    <error file="pugixml.cpp" line="12424" id="unusedFunction" severity="style" msg="The function &apos;evaluate_number&apos; is never used." />
    <error file="pugixml.cpp" line="12439" id="unusedFunction" severity="style" msg="The function &apos;evaluate_string&apos; is never used." />
    <error file="InteractionEngine.cpp" line="95" id="unusedFunction" severity="style" msg="The function &apos;exploreObject&apos; is never used." />
    <error file="pugixml.cpp" line="6066" id="unusedFunction" severity="style" msg="The function &apos;find_child_by_attribute&apos; is never used." />
    <error file="pugixml.cpp" line="7083" id="unusedFunction" severity="style" msg="The function &apos;get_memory_allocation_function&apos; is never used." />
    <error file="pugixml.cpp" line="7088" id="unusedFunction" severity="style" msg="The function &apos;get_memory_deallocation_function&apos; is never used." />
    <error file="pugixml.cpp" line="5184" id="unusedFunction" severity="style" msg="The function &apos;hash_value&apos; is never used." />
    <error file="pugixml.cpp" line="5720" id="unusedFunction" severity="style" msg="The function &apos;insert_copy_after&apos; is never used." />
    <error file="pugixml.cpp" line="5738" id="unusedFunction" severity="style" msg="The function &apos;insert_copy_before&apos; is never used." />
    <error file="pugixml.cpp" line="5964" id="unusedFunction" severity="style" msg="The function &apos;insert_move_after&apos; is never used." />
    <error file="pugixml.cpp" line="5982" id="unusedFunction" severity="style" msg="The function &apos;insert_move_before&apos; is never used." />
    <error file="RoomEngine.cpp" line="95" id="unusedFunction" severity="style" msg="The function &apos;leaveRoom&apos; is never used." />
    <error file="pugixml.cpp" line="6914" id="unusedFunction" severity="style" msg="The function &apos;load&apos; is never used." />
    <error file="pugixml.cpp" line="6261" id="unusedFunction" severity="style" msg="The function &apos;offset_debug&apos; is never used." />
    <error file="pugixml.cpp" line="2828" id="unusedFunction" severity="style" msg="The function &apos;parse_simple&apos; is never used." />
    <error file="pugixml.cpp" line="2760" id="unusedFunction" severity="style" msg="The function &apos;parse_wconv&apos; is never used." />
    <error file="pugixml.cpp" line="2708" id="unusedFunction" severity="style" msg="The function &apos;parse_wnorm&apos; is never used." />
    <error file="pugixml.cpp" line="5703" id="unusedFunction" severity="style" msg="The function &apos;prepend_copy&apos; is never used." />
    <error file="pugixml.cpp" line="5948" id="unusedFunction" severity="style" msg="The function &apos;prepend_move&apos; is never used." />
    <error file="pugixml.cpp" line="12403" id="unusedFunction" severity="style" msg="The function &apos;return_type&apos; is never used." />
    <error file="DataService.cpp" line="100" id="unusedFunction" severity="style" msg="The function &apos;savePlayer&apos; is never used." />
    <error file="pugixml.cpp" line="7077" id="unusedFunction" severity="style" msg="The function &apos;set_memory_management_functions&apos; is never used." />
    <error file="pugixml.cpp" line="6176" id="unusedFunction" severity="style" msg="The function &apos;traverse&apos; is never used." />
    <error file="pugixml.cpp" line="11823" id="unusedFunction" severity="style" msg="The function &apos;what&apos; is never used." />
    <error id="missingInclude" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
